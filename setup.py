import os
import sys
import getpass
from pathlib import Path

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_banner():
    banner = """
╔══════════════════════════════════════════════════════════╗
║               AUTO REQUEST ACCEPTOR BOT                 ║
║                     SETUP WIZARD                        ║
╚══════════════════════════════════════════════════════════╝
"""
    print(banner)

def validate_int_input(prompt):
    while True:
        try:
            value = int(input(prompt))
            return value
        except ValueError:
            print("❌ Please enter a valid number!")

def validate_not_empty(prompt, field_name):
    while True:
        value = input(prompt).strip()
        if value:
            return value
        print(f"❌ {field_name} cannot be empty!")

def setup_bot_token():
    print("\n" + "="*50)
    print("🔑 BOT TOKEN SETUP")
    print("="*50)
    print("1. Go to @BotFather on Telegram")
    print("2. Create a new bot with /newbot")
    print("3. Copy the bot token (looks like: 123456:ABCdefGHIjklMNOpqrsTUVwxyz)")
    print()
    
    bot_token = validate_not_empty("Enter your bot token: ", "Bot token")
    
    # Basic validation for bot token format
    if ':' not in bot_token or len(bot_token) < 20:
        print("⚠️  Warning: This doesn't look like a valid bot token format.")
        confirm = input("Continue anyway? (y/N): ").lower()
        if confirm != 'y':
            return setup_bot_token()
    
    return bot_token

def setup_api_credentials():
    print("\n" + "="*50)
    print("🌐 API CREDENTIALS SETUP")
    print("="*50)
    print("1. Go to https://my.telegram.org")
    print("2. Login with your Telegram account")
    print("3. Go to 'API Development Tools'")
    print("4. Create a new application")
    print()
    
    api_id = validate_int_input("Enter your API ID: ")
    api_hash = validate_not_empty("Enter your API Hash: ", "API Hash")
    
    return api_id, api_hash

def setup_owner_id():
    print("\n" + "="*50)
    print("👤 OWNER ID SETUP")
    print("="*50)
    print("1. Go to @userinfobot on Telegram")
    print("2. Send /start to the bot")
    print("3. Copy your numeric user ID")
    print()
    
    owner_id = validate_int_input("Enter your owner ID: ")
    return owner_id

def setup_userbot_session():
    print("\n" + "="*50)
    print("🤖 USERBOT SESSION SETUP")
    print("="*50)
    print("This is OPTIONAL but recommended for auto-accepting requests")
    print("If you don't want to use userbot, press Enter to skip")
    print()
    print("To get session string:")
    print("1. Run: python generate_session.py")
    print("2. Follow the instructions")
    print("3. Copy the generated session string")
    print()
    
    session = input("Enter your userbot session string (or press Enter to skip): ").strip()
    return session if session else ""

def setup_mongodb():
    print("\n" + "="*50)
    print("🗄️  MONGODB SETUP")
    print("="*50)
    print("Choose MongoDB option:")
    print("1. Local MongoDB (default: mongodb://localhost:27017)")
    print("2. MongoDB Atlas (cloud)")
    print("3. Custom MongoDB URL")
    print()
    
    choice = input("Enter choice (1/2/3) [default: 1]: ").strip() or "1"
    
    if choice == "1":
        mongodb_url = "mongodb://localhost:27017"
    elif choice == "2":
        print("\nFor MongoDB Atlas:")
        print("1. Go to https://cloud.mongodb.com")
        print("2. Create a cluster")
        print("3. Get connection string")
        print("4. Replace <password> with your actual password")
        print()
        mongodb_url = validate_not_empty("Enter MongoDB Atlas URL: ", "MongoDB URL")
    else:
        mongodb_url = validate_not_empty("Enter custom MongoDB URL: ", "MongoDB URL")
    
    return mongodb_url

def setup_log_channel():
    print("\n" + "="*50)
    print("📊 LOG CHANNEL SETUP")
    print("="*50)
    print("This is OPTIONAL but recommended for monitoring")
    print("Create a private channel and add your bot as admin")
    print("Then forward any message from that channel to @userinfobot")
    print("to get the channel ID (will be negative number like -1001234567890)")
    print()
    
    log_channel = input("Enter log channel ID (or press Enter to skip): ").strip()
    if log_channel:
        try:
            return int(log_channel)
        except ValueError:
            print("❌ Invalid channel ID format! Using default (0)")
    return 0

def generate_env_file(config):
    env_content = f"""# Auto Request Acceptor Bot Configuration
# Generated by setup.py

# Bot Configuration
BOT_TOKEN={config['bot_token']}
API_ID={config['api_id']}
API_HASH={config['api_hash']}
OWNER_ID={config['owner_id']}

# Userbot Configuration (Optional)
USERBOT_SESSION={config['userbot_session']}

# Database Configuration
MONGODB_URL={config['mongodb_url']}
DB_NAME=auto_req_bot

# Logging Configuration
LOG_CHANNEL={config['log_channel']}
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    return env_content

def generate_session_script():
    session_script = """
import asyncio
from pyrogram import Client

async def generate_session():
    print("🤖 Userbot Session Generator")
    print("=" * 40)
    
    api_id = input("Enter your API ID: ")
    api_hash = input("Enter your API Hash: ")
    
    async with Client(":memory:", api_id=int(api_id), api_hash=api_hash) as client:
        await client.start()
        
        if await client.get_me():
            session_string = await client.export_session_string()
            print("\\n" + "=" * 50)
            print("✅ SESSION GENERATED SUCCESSFULLY!")
            print("=" * 50)
            print("Copy the following session string and use it in setup:")
            print("\\n" + session_string)
            print("\\n" + "=" * 50)

if __name__ == "__main__":
    asyncio.run(generate_session())
"""
    
    with open('generate_session.py', 'w') as f:
        f.write(session_script)

def check_dependencies():
    print("\n" + "="*50)
    print("📦 CHECKING DEPENDENCIES")
    print("="*50)
    
    try:
        import pyrogram
        print("✅ Pyrogram is installed")
    except ImportError:
        print("❌ Pyrogram is not installed")
        print("Installing Pyrogram...")
        os.system(f"{sys.executable} -m pip install pyrogram[tgcrypto]")
    
    try:
        import pymongo
        print("✅ PyMongo is installed")
    except ImportError:
        print("❌ PyMongo is not installed")
        print("Installing PyMongo...")
        os.system(f"{sys.executable} -m pip install pymongo")
    
    try:
        import dotenv
        print("✅ python-dotenv is installed")
    except ImportError:
        print("❌ python-dotenv is not installed")
        print("Installing python-dotenv...")
        os.system(f"{sys.executable} -m pip install python-dotenv")

def main():
    clear_screen()
    print_banner()
    
    print("Welcome to the Auto Request Acceptor Bot setup!")
    print("This wizard will guide you through the configuration process.\\n")
    
    input("Press Enter to continue...")
    
    # Check dependencies
    check_dependencies()
    
    # Generate session script
    generate_session_script()
    print("✅ Generated generate_session.py for userbot session creation")
    
    # Collect configuration
    config = {}
    
    config['bot_token'] = setup_bot_token()
    config['api_id'], config['api_hash'] = setup_api_credentials()
    config['owner_id'] = setup_owner_id()
    config['userbot_session'] = setup_userbot_session()
    config['mongodb_url'] = setup_mongodb()
    config['log_channel'] = setup_log_channel()
    
    # Generate .env file
    env_content = generate_env_file(config)
    
    # Summary
    clear_screen()
    print_banner()
    print("✅ SETUP COMPLETED SUCCESSFULLY!")
    print("="*50)
    print("\n📁 Generated files:")
    print("   • .env (configuration file)")
    print("   • generate_session.py (userbot session generator)")
    
    print("\n🔧 Configuration summary:")
    print(f"   • Bot Token: {config['bot_token'][:10]}...{config['bot_token'][-10:]}")
    print(f"   • API ID: {config['api_id']}")
    print(f"   • API Hash: {config['api_hash'][:10]}...")
    print(f"   • Owner ID: {config['owner_id']}")
    print(f"   • Userbot Session: {'✅ Set' if config['userbot_session'] else '❌ Not set'}")
    print(f"   • MongoDB URL: {config['mongodb_url']}")
    print(f"   • Log Channel: {config['log_channel'] if config['log_channel'] else 'Not set'}")
    
    print("\n🚀 Next steps:")
    print("1. Make sure MongoDB is running (if using local)")
    print("2. Run: python main.py")
    print("3. Send /start to your bot")
    
    if not config['userbot_session']:
        print("\\n⚠️  Note: Without userbot session, auto-accepting won't work.")
        print("   Run 'python generate_session.py' later to generate session string")
        print("   Then add USERBOT_SESSION to .env file")
    
    print("\n" + "="*50)
    print("Need help? Check the documentation or create an issue.")
    print("="*50)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\n\\n❌ Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\\n\\n❌ An error occurred: {e}")
        sys.exit(1)
